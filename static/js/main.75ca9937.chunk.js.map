{"version":3,"sources":["api.js","components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["request","url","options","fetch","then","response","ok","Error","status","statusText","json","TodoList","state","input","select","changeHandler","event","setState","target","name","value","filterTodos","todos","todoContainsInput","filter","todo","title","includes","completed","this","props","selectedUserChanger","currentUserId","className","placeholder","onChange","map","classNames","key","id","type","readOnly","userId","onClick","React","Component","CurrentUser","user","loadData","prevProps","a","data","email","phone","clearUser","App","selectedUserId","changeSelectedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75ca9937.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com';\n\nconst request = (url, options) => (\n  fetch(BASE_URL + url, options)\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    })\n);\n\nexport const getTodos = () => (request('/todos'));\n\nexport const getUser = userId => (request(`/users/${userId}`));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    input: '',\n    select: 'All',\n  }\n\n  changeHandler = (event) => {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  filterTodos = (todos) => {\n    const { input, select } = this.state;\n    const todoContainsInput = todos.filter((todo) => {\n      if (todo.title) {\n        return todo.title.includes(input);\n      }\n\n      return false;\n    });\n\n    switch (select) {\n      case 'Active':\n        return todoContainsInput.filter(todo => !todo.completed);\n      case 'Completed':\n        return todoContainsInput.filter(todo => todo.completed);\n      default:\n        return todoContainsInput;\n    }\n  }\n\n  render() {\n    const { todos, selectedUserChanger, currentUserId } = this.props;\n    const { input, select } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          name=\"input\"\n          value={input}\n          placeholder=\"Search by title\"\n          onChange={this.changeHandler}\n        />\n\n        <select\n          name=\"select\"\n          value={select}\n          onChange={this.changeHandler}\n        >\n          <option value=\"All\">All</option>\n          <option value=\"Active\">Active</option>\n          <option value=\"Completed\">Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.filterTodos(todos).map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input type=\"checkbox\" readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'button',\n                    'TodoList__user-button',\n                    { 'TodoList__user-button--selected':\n                      todo.userId === currentUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    selectedUserChanger(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n    createdAt: PropTypes.string.isRequired,\n    updatedAt: PropTypes.string.isRequired,\n  })).isRequired,\n  selectedUserChanger: PropTypes.func.isRequired,\n  currentUserId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return <p>Loading...</p>;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={this.props.clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { getTodos } from './api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos: todos.data });\n      });\n  }\n\n  changeSelectedUser = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserChanger={this.changeSelectedUser}\n            currentUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}